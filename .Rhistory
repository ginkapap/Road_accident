)
dftrain[,1:9] -> dft1
results_dtree = train(vehicle_type~.,
data = dft1,
method = 'rpart',
trControl=cv_opts10
)
dftrain
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`)->df21_1
set.seed(1234)
dftemp <-sample_n(df21_1, 20000)
#dftemp <- df21
dftemp %>% select(-time) ->dftemp
#dftemp <- df21
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(dftemp$accident_severity, p=.8, list=F)
df_train = dftemp %>%
slice(trainIndices)
df_test = dftemp %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_dtree = train(dftrain$accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
results_dtree = train(accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
dftrain
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,`1st_road_class`)->df21_1
set.seed(1234)
dftemp <-sample_n(df21_1, 20000)
#dftemp <- df21
dftemp %>% select(-time) ->dftemp
#dftemp <- df21
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(dftemp$accident_severity, p=.8, list=F)
df_train = dftemp %>%
slice(trainIndices)
df_test = dftemp %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
logistic_fit <- train(accident_severity~.,
data = dftrain,
method = "glm",
family="binomial")
results_dtree = train(accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
results_rf = train(accident_severity~.,
data = dftrain,
method = 'rf',
ntree=100,
trControl=cv_opts10
)
preds_rf = predict(results_rf,dftest)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
preds_rf = predict(results_rf,dftest)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
results_dtree = train(accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,`1st_road_class`,`1st_point_of_impact`)->df21_1
set.seed(1234)
dftemp <-sample_n(df21_1, 20000)
#dftemp <- df21
dftemp %>% select(-time) ->dftemp
#dftemp <- df21
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(dftemp$accident_severity, p=.8, list=F)
df_train = dftemp %>%
slice(trainIndices)
df_test = dftemp %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
logistic_fit <- train(accident_severity~.,
data = dftrain,
method = "glm",
family="binomial")
results_dtree = train(accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21_1
set.seed(1234)
dftemp <-sample_n(df21_1, 20000)
#dftemp <- df21
dftemp %>% select(-time) ->dftemp
#dftemp <- df21
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(dftemp$accident_severity, p=.8, list=F)
df_train = dftemp %>%
slice(trainIndices)
df_test = dftemp %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_dtree = train(accident_severity~.,
data = dftrain,
method = 'rpart',
trControl=cv_opts10
)
dftrain$
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 20000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(dftemp$accident_severity, p=.8, list=F)
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_dtree = train(accident_severity~.,
data = df_train,
method = 'rpart',
trControl=cv_opts10
)
knitr::opts_chunk$set(echo = FALSE)
results_da = train(accident_severity~.,
data = df_train,
method = 'da',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 20000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = dftest$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'da',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da
preds_rf = predict(results_dtree,df_test)
preds_rf = predict(results_da,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
confusionMatrix(preds_rf, good_observed, positive='1')
confusionMatrix(preds_da, good_observed, positive='1')
confusionMatrix(preds_rf, good_observed, positive='1')
preds_rf = predict(results_da,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
results_rf = train(accident_severity~.,
data = df_train,
method = 'rf',
ntree=100,
trControl=cv_opts10
)
preds_rf = predict(results_rf,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 20000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_bagg = train(accident_severity~.,
data = df_train,
method = 'bag',
trControl=cv_opts10
)
method = ''bagControl',
results_bagg = train(accident_severity~.,
data = df_train,
method = 'bagControl',
trControl=cv_opts10
)
results_bagg = train(accident_severity~.,
data = df_train,
method = 'bag',
trControl=cv_opts10
)
sum(is.na(df_train))
results_bagg = train(accident_severity~.,
data = df_train,
method = 'treebag',
trControl=cv_opts10
)
preds_bagg = predict(results_bagg,df_test)
preds_bagg
confusionMatrix(preds_bagg, good_observed, positive='1')
results_boost = train(accident_severity~.,
data = df_train,
method = 'adaboost',
trControl=cv_opts10
)
results_boost = train(accident_severity~.,
data = df_train,
method = 'adaboost',
trControl=cv_opts10
)
results_boost = train(accident_severity~.,
data = df_train,
method = 'bstTree',
trControl=cv_opts10
)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 2000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_boost = train(accident_severity~.,
data = df_train,
method = 'ada',
trControl=cv_opts10
)
preds_boost = predict(results_boost,df_test)
preds_boost
confusionMatrix(preds_boost, good_observed, positive='1')
results_nnet = train(accident_severity~.,
data = df_train,
method = 'avNNet',
trControl=cv_opts10
)
preds_nnet = predict(results_nnet,df_test)
preds_nnet
confusionMatrix(preds_nnet, good_observed, positive='1')
preds_nnet = predict(results_nnet,df_test)
preds_nnet
confusionMatrix(preds_nnet, good_observed, positive='1')
results_nnet
results_da = train(accident_severity~.,
data = dftrain,
method = 'lda',
trControl=cv_opts10
)
_
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
