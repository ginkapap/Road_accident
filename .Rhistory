trControl=cv_opts10,
tuneGrid = knn_opts
)
View(results_knn10)
trl <- trainControl(method="repeatedcv",repeats = 3,classProbs=TRUE,summaryFunction = twoClassSummary)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = ctrl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = trl
)
results_da = train(accident_severity~.,
data = df_train,
method = 'amdai',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'amdai',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'binda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'dda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'hda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'hda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
cv_opts10 = trainControl(method= 'cv', number = 10,summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T) #for train set
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = trl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction=twoClassSummary(df_test, lev = levels(df_test$accident_severity)) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction=twoClassSummary(df_test, lev = levels(df_test$accident_severity))) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary(df_test, lev = levels(df_test$accident_severity))) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary()) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary) #for train set
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 1000)
df21sample %>% select(-time) ->df21sample
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
df_train %>% select(-casualty_severity) ->df_train
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 2000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da
preds_rf = predict(results_da,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 1000)
df21sample %>% select(-time) ->df21sample
cols <- c("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity","day_of_week","road_type","speed_limit","junction_detail","junction_control","light_conditions","weather_conditions","road_surface_conditions","special_conditions_at_site","carriageway_hazards","urban_or_rural_area","did_police_officer_attend_scene_of_accident","casualty_class","sex_of_casualty","casualty_severity","pedestrian_location","pedestrian_movement","car_passenger","bus_or_coach_passenger","pedestrian_road_maintenance_worker","casualty_type","casualty_home_area_type","casualty_imd_decile","vehicle_location_restricted_lane","pedestrian_crossing_human_control","pedestrian_crossing_physical_facilities","was_vehicle_left_hand_drive","first_point_of_impact","second_road_class","first_road_class","engine_capacity")
#df21sample %>% select("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity") -> df21sample
#cols <- c("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity")
df21sample[cols] <- lapply(df21sample[cols], factor)
#str(df21sample)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 1000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 2000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da
library(pROC)
install.packages("pROC")
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
library(pROC)
use_condaenv("m-team")
source_python("Road_Accident.py")
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
results_knn10
preds_knn = predict(results_knn10, df_test)
confusionMatrix(preds_knn, twenty_observed,positive = '1')
auc<-roc(df_test$accident_severity,preds_knn )
auc<-roc(factor(df_test$accident_severity),preds_knn)
auc<-roc(factor(df_test$accident_severity),preds_knn)
auc<-roc(numeric(df_test$accident_severity),preds_knn)
df_test$accident_severity <- numeric(df_test$accident_severity)
df_test$accident_severity <- as.numeric(df_test$accident_severity)
auc<-roc(df_test$accident_severity,preds_knn)
df_test$accident_severity <-factor(df_test$accident_severity)
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn
roc(df_test$accident_severity,preds_knn$`1`)
roc(df_test$accident_severity,preds_knn$`0`)
roc(df_test$accident_severity,preds_knn$`1`)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
samples <- sample(NROW(iris), NROW(iris) * .5)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
forest.model <- train(Species ~., data.train)
result.predicted.prob <- predict(forest.model, data.test, type="prob")
result.predicted.prob
View(iris)
trainSplit<-SMOTE(accident_severity~.,df_train,perc.over=100,perc.under=200)
results_nnet = train(accident_severity~.,
data = trainSplit,
method = 'avNNet',
trControl=cv_opts10
)
results_nnet
preds_nnet = predict(results_nnet,df_test,prob='prob')
confusionMatrix(preds_nnet, twenty_observed, positive='1')
auc<-roc(df_test$accident_severity,preds_nnet)
preds_nnet = predict(results_nnet,df_test,type='prob')
confusionMatrix(preds_nnet, twenty_observed, positive='1')
auc<-roc(df_test$accident_severity,preds_nnet)
auc<-roc(df_test$accident_severity,preds_nnet)
preds_nnet = predict(results_nnet,df_test,type='prob')
auc<-roc(df_test$accident_severity,preds_nnet)
preds_nnet = predict(results_nnet,df_test,prob='prob')
confusionMatrix(preds_nnet, twenty_observed, positive='1')
auc<-roc(df_test$accident_severity,preds_nnet)
preds_nnet = predict(results_nnet,df_test,type='prob')
confusionMatrix(preds_nnet, twenty_observed, positive='1')
auc<-roc(df_test$accident_severity,preds_nnet)
roc(df_test$accident_severity,preds_$`1`)
preds_knn = predict(results_knn10, df_test,type="prob")
confusionMatrix(preds_knn, twenty_observed,positive = '1')
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,type="prob")
auc<-roc(df_test$accident_severity,preds_knn)
preds_rf = predict(results_da,df_test,type='prob')
#confusionMatrix(preds_rf, twenty_observed, positive='1')
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,type="prob")
#confusionMatrix(preds_knn, twenty_observed,positive = '1')
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
#confusionMatrix(preds_knn, twenty_observed,positive = '1')
auc<-roc(df_test$accident_severity,preds_knn)
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
confusionMatrix(preds_knn, twenty_observed,positive = '1')
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
result.predicted.prob <- predict(forest.model, data.test, type="prob")
result.predicted.prob
result.roc <- roc(data.test$Species, result.predicted.prob$versicolor)
result.predicted.prob <- predict(forest.model, data.test, type="prob")
result.roc <- roc(data.test$Species, result.predicted.prob$versicolor)
result.roc
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test,probability = TRUE)
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
roc(df_test$accident_severity,preds_knn$`1`)
preds_knn = predict(results_knn10, df_test,probability = TRUE)
preds_knn
preds_knn = predict(results_knn10, df_test,type="prob")
preds_knn
auc<-roc(df_test$accident_severity,preds_knn)
preds_knn = predict(results_knn10, df_test, type="prob")
auc<-roc(df_test$accident_severity,preds_knn)
auc<-roc(df_test$accident_severity,preds_knn)
result.predicted.prob <- predict(forest.model, data.test, type="prob")
result.roc <- roc(data.test$Species, result.predicted.prob$versicolor)
result.roc
result.predicted.prob <- predict(forest.model, data.test, type="prob")
result.predicted.prob
preds_knn
result.predicted.prob
result.predicted.prob
auc<-roc(df_test$accident_severity,preds_knn)
aaa = predict(results_knn10, df_test, type="prob")
preds_knn
auc<-roc(df_test$accident_severity,aaa)
