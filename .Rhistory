df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 2000)
df21sample %>% select(-time) ->df21sample
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
good_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
preds_rf = predict(results_da,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
preds_rf = predict(results_da,df_test)
preds_rf
confusionMatrix(preds_rf, good_observed, positive='1')
results_da = train(accident_severity~.,
data = df_train,
method = 'lda'
)
results_da
results_da
View(results_da)
View(results_da)
results_da[["method"]]
results_da[["results"]]
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
df_test
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
twoClassSummary(df_test)
twoClassSummary(df_test)
twoClassSummary(df_test, lev = levels(df_test$obs))
preds_rf = predict(results_da,df_test)
twoClassSummary(df_test, lev = levels(df_test))
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
errorest(Species ~ ., data=iris, model=lda,
estimator = "cv", predict= mypredict.lda)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 1000)
df21sample %>% select(-time) ->df21sample
cols <- c("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity","day_of_week","road_type","speed_limit","junction_detail","junction_control","light_conditions","weather_conditions","road_surface_conditions","special_conditions_at_site","carriageway_hazards","urban_or_rural_area","did_police_officer_attend_scene_of_accident","casualty_class","sex_of_casualty","casualty_severity","pedestrian_location","pedestrian_movement","car_passenger","bus_or_coach_passenger","pedestrian_road_maintenance_worker","casualty_type","casualty_home_area_type","casualty_imd_decile","vehicle_location_restricted_lane","pedestrian_crossing_human_control","pedestrian_crossing_physical_facilities","was_vehicle_left_hand_drive","first_point_of_impact","second_road_class","first_road_class","engine_capacity")
#df21sample %>% select("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity") -> df21sample
#cols <- c("vehicle_type","towing_and_articulation","vehicle_manoeuvre","junction_location","skidding_and_overturning","hit_object_in_carriageway","vehicle_leaving_carriageway","hit_object_off_carriageway","journey_purpose_of_driver","sex_of_driver","propulsion_code","NUmber_of_Casualities_unique_to_accident_index","No_of_Vehicles_involved_unique_to_accident_index","police_force","accident_severity")
df21sample[cols] <- lapply(df21sample[cols], factor)
#str(df21sample)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_regreg10 = train(accident_severity~.,
data=df_train,
method = "glm",
trControl = cv_opts10,
family=binomial())
results_regreg10
regreg_pred<-predict(results_regreg10,df_test)
confusionMatrix(regreg_pred,twenty_observed,positive = '1')
varImp(results_regreg10)
df21sample %>% select(NUmber_of_Casualities_unique_to_accident_index,vehicle_manoeuvre,casualty_severity,police_force,junction_detail,skidding_and_overturning,second_road_class,light_conditions,casualty_imd_decile,pedestrian_crossing_physical_facilities,pedestrian_crossing_human_control,accident_severity) -> df21temppp
trainIndices = createDataPartition(df21temppp$accident_severity, p=.8, list=F)
dftemp_train = df21temppp %>%
slice(trainIndices)
dftemp_test = df21temppp %>%
slice(-trainIndices)
twenty_observedtemp = dftemp_test$accident_severity
results_regreg10 = train(accident_severity~.,
data=dftemp_train,
method = "glm",
trControl = cv_opts10,
family=binomial())
results_regreg10
regreg_pred<-predict(results_regreg10,dftemp_test)
confusionMatrix(regreg_pred,dftemp_test$accident_severity,positive = '1')
regreg_opts = expand.grid(.alpha = seq(.1, 1, length = 5),
.lambda = seq(.1, .5, length = 5))
results_regreg10 = train(accident_severity~.,
data=df_train,
method = "glmnet",
trControl = cv_opts10,
tuneGrid = regreg_opts)
results_regreg
regreg_opts = expand.grid(.alpha = seq(.1, 1, length = 5),
.lambda = seq(.1, .5, length = 5))
results_regreg10 = train(accident_severity~.,
data=df_train,
method = "glmnet",
trControl = cv_opts10,
tuneGrid = regreg_opts)
results_regreg10
preds_regreg = predict(results_regreg10, df_test)
confusionMatrix(preds_regreg, twenty_observed,positive = '1')
results_regreg10 = train(accident_severity~.,
data=df_train,
method = "gam",
trControl = cv_opts10)
results_regreg10
regreg_pred<-predict(results_regreg10,df_test)
confusionMatrix(regreg_pred,twenty_observed,positive = '1')
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_dtree = train(accident_severity~.,
data = df_train,
method = 'rpart',
trControl=cv_opts10
)
results_dtree
preds_dtee = predict(results_dtree,df_test)
confusionMatrix(preds_dtree, twenty_observed, positive='1')
preds_drtee = predict(results_dtree,df_test)
confusionMatrix(preds_dtree, twenty_observed, positive='1')
preds_dtree = predict(results_dtree,df_test)
confusionMatrix(preds_dtree, twenty_observed, positive='1')
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
results_knn10
preds_knn = predict(results_knn10, df_test)
confusionMatrix(preds_knn, twenty_observed,positive = '1')
results_bagg = train(accident_severity~.,
data = df_train,
method = 'treebag',
trControl=cv_opts10
)
results_bagg
preds_bagg = predict(results_bagg,df_test)
confusionMatrix(preds_bagg, twenty_observed, positive='1')
results_rf = train(accident_severity~.,
data = df_train,
method = 'rf',
ntree=100,
trControl=cv_opts10
)
results_rf
preds_rf = predict(results_rf,df_test)
confusionMatrix(preds_rf, twenty_observed, positive='1')
results_boost = train(accident_severity~.,
data = df_train,
method = 'ada',
trControl=cv_opts10
)
results_boost
preds_boost = predict(results_boost,df_test)
confusionMatrix(preds_boost, twenty_observed, positive='1')
results_svm10 = train(accident_severity~.,
data=df_train,
method='svmLinear2',
trControl=cv_opts10,
tuneLength=5,
probability=TRUE)  # to get probs along with classifications
results_svm10
preds_svm = predict(results_svm10, df_test)
confusionMatrix(preds_svm, twenty_observed,positive = '1')
results_nnet = train(accident_severity~.,
data = df_train,
method = 'avNNet',
trControl=cv_opts10
)
results_nnet
preds_nnet = predict(results_nnet,df_test)
confusionMatrix(preds_nnet, twenty_observed, positive='1')
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
twoClassSummary(df_test, lev = levels(accident_severity))
twoClassSummary(df_test, lev = levels('accident_severity'))
twoClassSummary(preds_knn, lev = levels(df_test$accident_severity))
results_knn10
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
twoClassSummary(preds_knn, lev = levels(df_test$accident_severity))
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
twoClassSummary(results_knn10, lev = levels(df_test$accident_severity))
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
twoClassSummary(df_test, lev = levels(df_test$accident_severity))
df_test$accident_severity
twoClassSummary(df_test, lev = levels(twenty_observed))
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
twoClassSummary(df_test, lev = levels(twenty_observed))
knn_opts = data.frame(k=c(seq(3, 11, 2)))
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts)
twoClassSummary(results_knn10, lev = levels(twenty_observed))
twoClassSummary(df_test)
twoClassSummary(preds_knn)
=====
ctrl <- trainControl(summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl=ctrl
)
ctrl <- trainControl(summaryFunction=twoClassSummary)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl=ctrl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl=ctrl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
View(results_knn10)
trl <- trainControl(method="repeatedcv",repeats = 3,classProbs=TRUE,summaryFunction = twoClassSummary)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = ctrl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = trl
)
results_da = train(accident_severity~.,
data = df_train,
method = 'amdai',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'amdai',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'binda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'dda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'hda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'hda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
cv_opts10 = trainControl(method= 'cv', number = 10,summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T) #for train set
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts,
trControl = trl
)
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction=twoClassSummary(df_test, lev = levels(df_test$accident_severity)) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction=twoClassSummary(df_test, lev = levels(df_test$accident_severity))) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary(df_test, lev = levels(df_test$accident_severity))) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary()) #for train set
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary) #for train set
results_knn10 = train(accident_severity~.,
data=df_train,
method='knn',
trControl=cv_opts10,
tuneGrid = knn_opts
)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
library(reshape2)
library(dplyr)
library(ggplot2)
library(mice)
library(tidyr)
library(DMwR)
library(gplots)
library(caret)
library(tidyverse)
library(leaflet)
library(xts)
library(chron)
library(showtext)
showtext_auto()
library(kableExtra)
use_condaenv("m-team")
source_python("Road_Accident.py")
#library(doParallel)
#cl = makeCluster(4)
#registerDoParallel(cl) # 平行運算cpu設為兩顆stopCluster(cl)
df21$accident_severity <- factor(df21$accident_severity)
df21$vehicle_location_restricted_lane = df21$`vehicle_location-restricted_lane`
df21$pedestrian_crossing_human_control=df21$`pedestrian_crossing-human_control`
df21$pedestrian_crossing_physical_facilities=df21$`pedestrian_crossing-physical_facilities`
df21$engine_capacity=df21$`engine_capacity_(cc)`
df21$was_vehicle_left_hand_drive=df21$`was_vehicle_left_hand_drive?`
df21$local_authority_district = df21$`local_authority_(district)`
df21$first_point_of_impact = df21$`1st_point_of_impact`
df21$second_road_class=df21$`2nd_road_class`
df21$first_road_class=df21$`1st_road_class`
df21$first_point_of_impact=df21$`1st_point_of_impact`
df21 %>% select(-`vehicle_location-restricted_lane`,-`pedestrian_crossing-human_control`,-`pedestrian_crossing-physical_facilities`,-`engine_capacity_(cc)`,-`was_vehicle_left_hand_drive?`,-`local_authority_(district)`,`1st_point_of_impact`,-`2nd_road_class`,-`1st_road_class`,-`1st_point_of_impact`)->df21
set.seed(1234)
df21sample <-sample_n(df21, 1000)
df21sample %>% select(-time) ->df21sample
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10, summaryFunction = twoClassSummary) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
set.seed(1234) # so that the indices will be the same when re-run
trainIndices = createDataPartition(df21sample$accident_severity, p=.8, list=F)
df_train = df21sample %>%
slice(trainIndices)
df_test = df21sample %>%
slice(-trainIndices)
trainIndicesV = createDataPartition(df_train$accident_severity, p=0.7, list = FALSE)
dftrain <- df_train[trainIndicesV,]
dftest <- df_train[-trainIndicesV,]
twenty_observed = df_test$accident_severity
cv_opts10 = trainControl(method= 'cv', number = 10) #for train set
cv_opts5 = trainControl(method = 'cv', number = 5) #for test set
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
df_train %>% select(-casualty_severity) ->df_train
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
results_da = train(accident_severity~.,
data = df_train,
method = 'lda',
trControl=cv_opts10
)
